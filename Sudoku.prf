(sudoku2
 (Zahl_TCC1 0
  (Zahl_TCC1-1 nil 3755938289
   ("" (grind) (("" (inst 1 "1") nil nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil))
   nil))
 (erste_sub 0
  (erste_sub-1 nil 3756543064
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (decompose-equality)
              (("1" (expand "sub1") (("1" (smash) nil nil)) nil)
               ("2" (expand "sub1") (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "sub1")
            (("2" (lemma "sub1_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "sub1_inv(y!1)")
                    (("2" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sub1 const-decl "Zahl" sudoku2 nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil sudoku2 nil)
    (sub1_inv const-decl "[below(3), below(3)]" sudoku2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (zweite_sub 0
  (zweite_sub-1 nil 3756545799
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (decompose-equality)
              (("1" (expand "sub2") (("1" (smash) nil nil)) nil)
               ("2" (expand "sub2") (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "sub2")
            (("2" (lemma "sub2_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "sub2_inv(y!1)")
                    (("2" (assert) (("2" (smash) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sub2 const-decl "Zahl" sudoku2 nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil sudoku2 nil)
    (sub2_inv const-decl "[below(3), below(3)]" sudoku2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (dritte_sub 0
  (dritte_sub-1 nil 3756546657
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (decompose-equality)
              (("1" (expand "sub3") (("1" (smash) nil nil)) nil)
               ("2" (expand "sub3") (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "sub3")
            (("2" (lemma "sub3_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "sub3_inv(y!1)")
                    (("2" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sub3 const-decl "Zahl" sudoku2 nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil sudoku2 nil)
    (sub3_inv const-decl "[below(3), below(3)]" sudoku2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (alle_zeilen 0
  (alle_zeilen-1 nil 3755938302
   ("" (skolem!)
    (("" (expand "line")
      (("" (expand "mod3")
        (("" (expand "bijective?")
          (("" (split)
            (("1" (expand "injective?")
              (("1" (skolem!)
                (("1" (expand "div3")
                  (("1" (flatten)
                    (("1" (smash)
                      (("1" (grind) (("1" (postpone) nil nil)) nil)
                       ("2" (postpone) nil nil)
                       ("3" (postpone) nil nil)
                       ("4" (postpone) nil nil)
                       ("5" (postpone) nil nil)
                       ("6" (postpone) nil nil)
                       ("7" (postpone) nil nil)
                       ("8" (postpone) nil nil)
                       ("9" (postpone) nil nil)
                       ("10" (postpone) nil nil)
                       ("11" (postpone) nil nil)
                       ("12" (postpone) nil nil)
                       ("13" (postpone) nil nil)
                       ("14" (postpone) nil nil)
                       ("15" (postpone) nil nil)
                       ("16" (postpone) nil nil)
                       ("17" (postpone) nil nil)
                       ("18" (postpone) nil nil)
                       ("19" (postpone) nil nil)
                       ("20" (postpone) nil nil)
                       ("21" (postpone) nil nil)
                       ("22" (postpone) nil nil)
                       ("23" (postpone) nil nil)
                       ("24" (postpone) nil nil)
                       ("25" (postpone) nil nil)
                       ("26" (postpone) nil nil)
                       ("27" (postpone) nil nil)
                       ("28" (postpone) nil nil)
                       ("29" (postpone) nil nil)
                       ("30" (postpone) nil nil)
                       ("31" (postpone) nil nil)
                       ("32" (postpone) nil nil)
                       ("33" (postpone) nil nil)
                       ("34" (postpone) nil nil)
                       ("35" (postpone) nil nil)
                       ("36" (postpone) nil nil)
                       ("37" (postpone) nil nil)
                       ("38" (postpone) nil nil)
                       ("39" (postpone) nil nil)
                       ("40" (postpone) nil nil)
                       ("41" (postpone) nil nil)
                       ("42" (postpone) nil nil)
                       ("43" (postpone) nil nil)
                       ("44" (postpone) nil nil)
                       ("45" (postpone) nil nil)
                       ("46" (postpone) nil nil)
                       ("47" (postpone) nil nil)
                       ("48" (postpone) nil nil)
                       ("49" (postpone) nil nil)
                       ("50" (postpone) nil nil)
                       ("51" (postpone) nil nil)
                       ("52" (postpone) nil nil)
                       ("53" (postpone) nil nil)
                       ("54" (postpone) nil nil)
                       ("55" (postpone) nil nil)
                       ("56" (postpone) nil nil)
                       ("57" (postpone) nil nil)
                       ("58" (postpone) nil nil)
                       ("59" (postpone) nil nil)
                       ("60" (postpone) nil nil)
                       ("61" (postpone) nil nil)
                       ("62" (postpone) nil nil)
                       ("63" (postpone) nil nil)
                       ("64" (postpone) nil nil)
                       ("65" (postpone) nil nil)
                       ("66" (postpone) nil nil)
                       ("67" (postpone) nil nil)
                       ("68" (postpone) nil nil)
                       ("69" (postpone) nil nil)
                       ("70" (postpone) nil nil)
                       ("71" (postpone) nil nil)
                       ("72" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (alle_spalten 0
  (alle_spalten-1 nil 3756577890
   ("" (skolem-typepred) (("" (postpone) nil nil)) nil) nil shostak))
 (alle_subs 0
  (alle_subs-1 nil 3755938855
   ("" (skolem!)
    (("" (expand "bijective?")
      (("" (split)
        (("1" (expand "injective?")
          (("1" (skolem!)
            (("1" (flatten)
              (("1" (expand "sudoku1")
                (("1" (expand "sub1")
                  (("1" (expand "sub2")
                    (("1" (smash)
                      (("1" (postpone) nil nil)
                       ("2" (postpone) nil nil)
                       ("3" (postpone) nil nil)
                       ("4" (postpone) nil nil)
                       ("5" (postpone) nil nil)
                       ("6" (postpone) nil nil)
                       ("7" (postpone) nil nil)
                       ("8" (postpone) nil nil)
                       ("9" (postpone) nil nil)
                       ("10" (postpone) nil nil)
                       ("11" (postpone) nil nil)
                       ("12" (postpone) nil nil)
                       ("13" (postpone) nil nil)
                       ("14" (postpone) nil nil)
                       ("15" (postpone) nil nil)
                       ("16" (postpone) nil nil)
                       ("17" (postpone) nil nil)
                       ("18" (postpone) nil nil)
                       ("19" (postpone) nil nil)
                       ("20" (postpone) nil nil)
                       ("21" (postpone) nil nil)
                       ("22" (postpone) nil nil)
                       ("23" (postpone) nil nil)
                       ("24" (postpone) nil nil)
                       ("25" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (erste_zeile 0
  (erste_zeile-1 nil 3756548332
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand "sudoku1")
                (("1" (expand "sub1")
                  (("1" (expand "sub2")
                    (("1" (expand "sub3")
                      (("1" (expand "sub9")
                        (("1" (expand "mod3")
                          (("1" (expand "div3") (("1" (smash) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "line")
            (("2" (lemma "erste_zeile_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "erste_zeile_inv(y!1)")
                    (("2" (expand "sudoku1")
                      (("2" (expand "div3")
                        (("2" (expand "erste_zeile_inv")
                          (("2" (expand "sub9")
                            (("2" (expand "mod3")
                              (("2"
                                (expand "sub1")
                                (("2"
                                  (expand "sub2")
                                  (("2"
                                    (expand "sub3")
                                    (("2" (smash) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (erste_zeile_inv const-decl "below(9)" sudoku2 nil)
    (Zahl nonempty-type-eq-decl nil sudoku2 nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil)
    (sudoku1 const-decl "SubMatrix" sudoku2 nil)
    (sub2 const-decl "Zahl" sudoku2 nil)
    (sub9 const-decl "Zahl" sudoku2 nil)
    (div3 const-decl "below(3)" sudoku2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod3 const-decl "below(3)" sudoku2 nil)
    (sub3 const-decl "Zahl" sudoku2 nil)
    (sub1 const-decl "Zahl" sudoku2 nil)
    (line const-decl "[below(9) -> Zahl]" sudoku2 nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (zweite_zeile 0
  (zweite_zeile-1 nil 3756571922
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand "sudoku1")
                (("1" (expand "sub1")
                  (("1" (expand "sub2")
                    (("1" (expand "sub3")
                      (("1" (expand "sub9")
                        (("1" (expand "mod3")
                          (("1" (expand "div3") (("1" (smash) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "line")
            (("2" (lemma "zweite_zeile_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "zweite_zeile_inv(y!1)")
                    (("2" (expand "sudoku1")
                      (("2" (expand "div3")
                        (("2" (expand "zweite_zeile_inv")
                          (("2" (expand "mod3")
                            (("2" (expand "sub2")
                              (("2"
                                (expand "sub3")
                                (("2"
                                  (expand "sub9")
                                  (("2"
                                    (expand "sub1")
                                    (("2" (smash) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" sudoku2 nil)
    (sub1 const-decl "Zahl" sudoku2 nil)
    (sub3 const-decl "Zahl" sudoku2 nil)
    (mod3 const-decl "below(3)" sudoku2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div3 const-decl "below(3)" sudoku2 nil)
    (sub9 const-decl "Zahl" sudoku2 nil)
    (sub2 const-decl "Zahl" sudoku2 nil)
    (sudoku1 const-decl "SubMatrix" sudoku2 nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil sudoku2 nil)
    (zweite_zeile_inv const-decl "below(9)" sudoku2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (dritte_zeile 0
  (dritte_zeile-1 nil 3756572817
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand "sudoku1")
                (("1" (expand "sub1")
                  (("1" (expand "sub2")
                    (("1" (expand "sub3")
                      (("1" (expand "sub9")
                        (("1" (expand "mod3")
                          (("1" (expand "div3") (("1" (smash) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "line")
            (("2" (lemma "dritte_zeile_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "dritte_zeile_inv(y!1)")
                    (("2" (expand "sudoku1")
                      (("2" (expand "div3")
                        (("2" (expand "sub9")
                          (("2" (expand "mod3")
                            (("2" (expand "sub1")
                              (("2"
                                (expand "sub2")
                                (("2"
                                  (expand "sub3")
                                  (("2"
                                    (expand "dritte_zeile_inv")
                                    (("2" (smash) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" sudoku2 nil)
    (sub1 const-decl "Zahl" sudoku2 nil)
    (sub3 const-decl "Zahl" sudoku2 nil)
    (mod3 const-decl "below(3)" sudoku2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div3 const-decl "below(3)" sudoku2 nil)
    (sub9 const-decl "Zahl" sudoku2 nil)
    (sub2 const-decl "Zahl" sudoku2 nil)
    (sudoku1 const-decl "SubMatrix" sudoku2 nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil sudoku2 nil)
    (dritte_zeile_inv const-decl "below(9)" sudoku2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (vierte_zeile 0
  (vierte_zeile-1 nil 3756573241
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1"
              (expand* "line" "sudoku1" "sub4" "sub5" "sub6" "sub9"
               "mod3" "div3")
              (("1" (smash) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "line")
            (("2" (inst 1 "vierte_zeile_inv(y!1)")
              (("2"
                (expand* "sudoku1" "div3" "mod3" "vierte_zeile_inv")
                (("2" (expand* "sub4" "sub5" "sub6")
                  (("2" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sudoku1 const-decl "SubMatrix" sudoku2 nil)
    (sub5 const-decl "Zahl" sudoku2 nil)
    (sub9 const-decl "Zahl" sudoku2 nil)
    (div3 const-decl "below(3)" sudoku2 nil)
    (mod3 const-decl "below(3)" sudoku2 nil)
    (sub6 const-decl "Zahl" sudoku2 nil)
    (sub4 const-decl "Zahl" sudoku2 nil)
    (line const-decl "[below(9) -> Zahl]" sudoku2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil sudoku2 nil)
    (vierte_zeile_inv const-decl "below(9)" sudoku2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (fuenfte_zeile 0
  (fuenfte_zeile-1 nil 3756574513
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub4" "sub5" "sub6")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "fuenfte_zeile_inv(y!1)")
            (("2" (expand "line")
              (("2"
                (expand* "sudoku1" "div3" "mod3" "fuenfte_zeile_inv")
                (("2" (expand* "sub4" "sub5" "sub6")
                  (("2" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" sudoku2 nil)
    (sub5 const-decl "Zahl" sudoku2 nil)
    (sub6 const-decl "Zahl" sudoku2 nil)
    (sub4 const-decl "Zahl" sudoku2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" sudoku2 nil)
    (mod3 const-decl "below(3)" sudoku2 nil)
    (div3 const-decl "below(3)" sudoku2 nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil sudoku2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fuenfte_zeile_inv const-decl "below(9)" sudoku2 nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (sechste_zeile 0
  (sechste_zeile-1 nil 3756575391
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub4" "sub5" "sub6")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "sechste_zeile_inv(y!1)")
            (("2" (expand* "line" "sechste_zeile_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub4" "sub5" "sub6")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" sudoku2 nil)
    (sub5 const-decl "Zahl" sudoku2 nil)
    (sub6 const-decl "Zahl" sudoku2 nil)
    (sub4 const-decl "Zahl" sudoku2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" sudoku2 nil)
    (mod3 const-decl "below(3)" sudoku2 nil)
    (div3 const-decl "below(3)" sudoku2 nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil sudoku2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sechste_zeile_inv const-decl "below(9)" sudoku2 nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (siebte_zeile 0
  (siebte_zeile-1 nil 3756576633
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub7" "sub8" "sub9")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "siebte_zeile_inv(y!1)")
            (("2" (expand* "line" "siebte_zeile_inv")
              (("2"
                (expand* "sudoku1" "div3" "mod3" "sub7" "sub8" "sub9")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" sudoku2 nil)
    (sub8 const-decl "Zahl" sudoku2 nil)
    (sub9 const-decl "Zahl" sudoku2 nil)
    (sub7 const-decl "Zahl" sudoku2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" sudoku2 nil)
    (mod3 const-decl "below(3)" sudoku2 nil)
    (div3 const-decl "below(3)" sudoku2 nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil sudoku2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (siebte_zeile_inv const-decl "below(9)" sudoku2 nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (achte_zeile 0
  (achte_zeile-1 nil 3756577333
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub7" "sub8" "sub9")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "achte_zeile_inv(y!1)")
            (("2" (expand* "line" "achte_zeile_inv")
              (("2"
                (expand* "sudoku1" "div3" "mod3" "sub7" "sub8" "sub9")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" sudoku2 nil)
    (sub8 const-decl "Zahl" sudoku2 nil)
    (sub9 const-decl "Zahl" sudoku2 nil)
    (sub7 const-decl "Zahl" sudoku2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" sudoku2 nil)
    (mod3 const-decl "below(3)" sudoku2 nil)
    (div3 const-decl "below(3)" sudoku2 nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil sudoku2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (achte_zeile_inv const-decl "below(9)" sudoku2 nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (neunte_zeile 0
  (neunte_zeile-1 nil 3756577687
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (expand "line")
            (("1" (expand* "sudoku1" "div3" "mod3")
              (("1" (expand* "sub7" "sub8" "sub9")
                (("1" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "neunte_zeile_inv(y!1)")
            (("2" (expand* "line" "neunte_zeile_inv")
              (("2"
                (expand* "sudoku1" "div3" "mod3" "sub7" "sub8" "sub9")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (div3 const-decl "below(3)" sudoku2 nil)
    (mod3 const-decl "below(3)" sudoku2 nil)
    (sudoku1 const-decl "SubMatrix" sudoku2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub7 const-decl "Zahl" sudoku2 nil)
    (sub9 const-decl "Zahl" sudoku2 nil)
    (sub8 const-decl "Zahl" sudoku2 nil)
    (line const-decl "[below(9) -> Zahl]" sudoku2 nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil sudoku2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neunte_zeile_inv const-decl "below(9)" sudoku2 nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (is_bijective 0
  (is_bijective-1 nil 3756539253
   ("" (expand "test_bijective")
    (("" (expand "bijective?")
      (("" (split)
        (("1" (expand "injective?")
          (("1" (skolem!)
            (("1" (lift-if)
              (("1" (lift-if)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "surjective?")
          (("2" (skolem!)
            (("2" (assert) (("2" (postpone) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((test_bijective const-decl "below(2)" sudoku2 nil)
    (injective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak)))

