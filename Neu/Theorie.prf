(Theorie
 (erste_sub 0
  (erste_sub-1 nil 3756585519
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (decompose-equality)
              (("1" (expand "sub1") (("1" (smash) nil nil)) nil)
               ("2" (expand "sub1") (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "sub1")
            (("2" (lemma "sub1_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "sub1_inv(y!1)")
                    (("2" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub1_inv const-decl "[below(3), below(3)]" Sub_inv nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (sub1 const-decl "Zahl" Sudoku nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (zweite_sub 0
  (zweite_sub-1 nil 3756585936
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (decompose-equality)
              (("1" (expand "sub2") (("1" (smash) nil nil)) nil)
               ("2" (expand "sub2") (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "sub2")
            (("2" (lemma "sub2_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "sub2_inv(y!1)")
                    (("2" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub2_inv const-decl "[below(3), below(3)]" Sub_inv nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (sub2 const-decl "Zahl" Sudoku nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (dritte_sub 0
  (dritte_sub-1 nil 3756586156
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (decompose-equality)
              (("1" (expand "sub3") (("1" (smash) nil nil)) nil)
               ("2" (expand "sub3") (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "sub3")
            (("2" (lemma "sub3_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "sub3_inv(y!1)")
                    (("2" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub3_inv const-decl "[below(3), below(3)]" Sub_inv nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (sub3 const-decl "Zahl" Sudoku nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (vierte_sub 0
  (vierte_sub-1 nil 3756586474
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (decompose-equality)
              (("1" (expand "sub4") (("1" (smash) nil nil)) nil)
               ("2" (expand "sub4") (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "sub4")
            (("2" (lemma "sub4_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "sub4_inv(y!1)")
                    (("2" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub4_inv const-decl "[below(3), below(3)]" Sub_inv nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (sub4 const-decl "Zahl" Sudoku nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (fuenfte_sub 0
  (fuenfte_sub-1 nil 3756586686
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (decompose-equality)
              (("1" (expand "sub5") (("1" (smash) nil nil)) nil)
               ("2" (expand "sub5") (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "sub5")
            (("2" (lemma "sub5_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "sub5_inv(y!1)")
                    (("2" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub5_inv const-decl "[below(3), below(3)]" Sub_inv nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (sub5 const-decl "Zahl" Sudoku nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (sechste_sub 0
  (sechste_sub-1 nil 3756586836
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (decompose-equality)
              (("1" (expand "sub6") (("1" (smash) nil nil)) nil)
               ("2" (expand "sub6") (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "sub6")
            (("2" (lemma "sub6_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "sub6_inv(y!1)")
                    (("2" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub6_inv const-decl "[below(3), below(3)]" Sub_inv nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (sub6 const-decl "Zahl" Sudoku nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (siebte_sub 0
  (siebte_sub-1 nil 3756587008
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (decompose-equality)
              (("1" (expand "sub7") (("1" (smash) nil nil)) nil)
               ("2" (expand "sub7") (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "sub7")
            (("2" (lemma "sub7_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "sub7_inv(y!1)")
                    (("2" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub7_inv const-decl "[below(3), below(3)]" Sub_inv nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (sub7 const-decl "Zahl" Sudoku nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (achte_sub 0
  (achte_sub-1 nil 3756587308
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (decompose-equality)
              (("1" (expand "sub8") (("1" (smash) nil nil)) nil)
               ("2" (expand "sub8") (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "sub8")
            (("2" (lemma "sub8_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "sub8_inv(y!1)")
                    (("2" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub8_inv const-decl "[below(3), below(3)]" Sub_inv nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (sub8 const-decl "Zahl" Sudoku nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (neunte_sub 0
  (neunte_sub-1 nil 3756587421
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (decompose-equality)
              (("1" (expand "sub9") (("1" (smash) nil nil)) nil)
               ("2" (expand "sub9") (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (expand "sub9")
            (("2" (lemma "sub9_inv")
              (("2" (decompose-equality)
                (("2" (inst -1 "y!1")
                  (("2" (inst 1 "sub9_inv(y!1)")
                    (("2" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub9_inv const-decl "[below(3), below(3)]" Sub_inv nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (sub9 const-decl "Zahl" Sudoku nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (erste_zeile 0
  (erste_zeile-1 nil 3756587565
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub1" "sub2" "sub3")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "erste_zeile_inv(y!1)")
            (("2" (expand* "line" "erste_zeile_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub1" "sub2" "sub3")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub2 const-decl "Zahl" Sudoku nil)
    (sub3 const-decl "Zahl" Sudoku nil)
    (sub1 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (erste_zeile_inv const-decl "below(9)" Line_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (zweite_zeile 0
  (zweite_zeile-1 nil 3756587996
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub1" "sub2" "sub3")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "zweite_zeile_inv(y!1)")
            (("2" (expand* "line" "zweite_zeile_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub1" "sub2" "sub3")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub2 const-decl "Zahl" Sudoku nil)
    (sub3 const-decl "Zahl" Sudoku nil)
    (sub1 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zweite_zeile_inv const-decl "below(9)" Line_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (dritte_zeile 0
  (dritte_zeile-1 nil 3756588132
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub1" "sub2" "sub3")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "dritte_zeile_inv(y!1)")
            (("2" (expand* "line" "dritte_zeile_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub1" "sub2" "sub3")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub2 const-decl "Zahl" Sudoku nil)
    (sub3 const-decl "Zahl" Sudoku nil)
    (sub1 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dritte_zeile_inv const-decl "below(9)" Line_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (vierte_zeile 0
  (vierte_zeile-1 nil 3756588284
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub4" "sub5" "sub6")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "vierte_zeile_inv(y!1)")
            (("2" (expand* "line" "vierte_zeile_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub4" "sub5" "sub6")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub5 const-decl "Zahl" Sudoku nil)
    (sub6 const-decl "Zahl" Sudoku nil)
    (sub4 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vierte_zeile_inv const-decl "below(9)" Line_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (fuenfte_zeile 0
  (fuenfte_zeile-1 nil 3756630058
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub4" "sub5" "sub6")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "fuenfte_zeile_inv(y!1)")
            (("2" (expand* "line" "fuenfte_zeile_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub4" "sub5" "sub6")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub5 const-decl "Zahl" Sudoku nil)
    (sub6 const-decl "Zahl" Sudoku nil)
    (sub4 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fuenfte_zeile_inv const-decl "below(9)" Line_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (sechste_zeile 0
  (sechste_zeile-1 nil 3756630508
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub4" "sub5" "sub6")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "sechste_zeile_inv(y!1)")
            (("2" (expand* "line" "sechste_zeile_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub4" "sub5" "sub6")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub5 const-decl "Zahl" Sudoku nil)
    (sub6 const-decl "Zahl" Sudoku nil)
    (sub4 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sechste_zeile_inv const-decl "below(9)" Line_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (siebte_zeile 0
  (siebte_zeile-1 nil 3756630857
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub7" "sub8" "sub9")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "siebte_zeile_inv(y!1)")
            (("2" (expand* "line" "siebte_zeile_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub7" "sub8" "sub9")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub8 const-decl "Zahl" Sudoku nil)
    (sub9 const-decl "Zahl" Sudoku nil)
    (sub7 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (siebte_zeile_inv const-decl "below(9)" Line_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (achte_zeile 0
  (achte_zeile-1 nil 3756631837
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub7" "sub8" "sub9")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "achte_zeile_inv(y!1)")
            (("2" (expand* "line" "achte_zeile_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub7" "sub8" "sub9")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub8 const-decl "Zahl" Sudoku nil)
    (sub9 const-decl "Zahl" Sudoku nil)
    (sub7 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (achte_zeile_inv const-decl "below(9)" Line_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (neunte_zeile 0
  (neunte_zeile-1 nil 3756631945
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "line")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub7" "sub8" "sub9")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "neunte_zeile_inv(y!1)")
            (("2" (expand* "line" "neunte_zeile_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub7" "sub8" "sub9")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (line const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub8 const-decl "Zahl" Sudoku nil)
    (sub9 const-decl "Zahl" Sudoku nil)
    (sub7 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neunte_zeile_inv const-decl "below(9)" Line_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (erste_spalte 0
  (erste_spalte-1 nil 3756695877
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "column")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub1" "sub4" "sub7")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "erste_spalte_inv(y!1)")
            (("2" (expand* "column" "erste_spalte_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub1" "sub4" "sub7")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (erste_spalte_inv const-decl "below(9)" Column_inv nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub1 const-decl "Zahl" Sudoku nil)
    (sub7 const-decl "Zahl" Sudoku nil)
    (sub4 const-decl "Zahl" Sudoku nil)
    (column const-decl "[below(9) -> Zahl]" Theorie nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (zweite_spalte 0
  (zweite_spalte-1 nil 3756697030
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "column")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub1" "sub4" "sub7")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "zweite_spalte_inv(y!1)")
            (("2" (expand* "column" "zweite_spalte_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub1" "sub4" "sub7")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (zweite_spalte_inv const-decl "below(9)" Column_inv nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub1 const-decl "Zahl" Sudoku nil)
    (sub7 const-decl "Zahl" Sudoku nil)
    (sub4 const-decl "Zahl" Sudoku nil)
    (column const-decl "[below(9) -> Zahl]" Theorie nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (dritte_spalte 0
  (dritte_spalte-1 nil 3756697369
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "column")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub1" "sub4" "sub7")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "dritte_spalte_inv(y!1)")
            (("2" (expand* "column" "dritte_spalte_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub1" "sub4" "sub7")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (column const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub4 const-decl "Zahl" Sudoku nil)
    (sub7 const-decl "Zahl" Sudoku nil)
    (sub1 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dritte_spalte_inv const-decl "below(9)" Column_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (vierte_spalte 0
  (vierte_spalte-1 nil 3756697539
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "column")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub2" "sub5" "sub8")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "vierte_spalte_inv(y!1)")
            (("2" (expand* "column" "vierte_spalte_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub2" "sub5" "sub8")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (column const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub5 const-decl "Zahl" Sudoku nil)
    (sub8 const-decl "Zahl" Sudoku nil)
    (sub2 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vierte_spalte_inv const-decl "below(9)" Column_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (fuenfte_spalte 0
  (fuenfte_spalte-1 nil 3756697873
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "column")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub2" "sub5" "sub8")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "fuenfte_spalte_inv(y!1)")
            (("2" (expand* "column" "fuenfte_spalte_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub2" "sub5" "sub8")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (column const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub5 const-decl "Zahl" Sudoku nil)
    (sub8 const-decl "Zahl" Sudoku nil)
    (sub2 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fuenfte_spalte_inv const-decl "below(9)" Column_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (sechste_spalte 0
  (sechste_spalte-1 nil 3756698138
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "column")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub2" "sub5" "sub8")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "sechste_spalte_inv(y!1)")
            (("2" (expand* "column" "sechste_spalte_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub2" "sub5" "sub8")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (column const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub5 const-decl "Zahl" Sudoku nil)
    (sub8 const-decl "Zahl" Sudoku nil)
    (sub2 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sechste_spalte_inv const-decl "below(9)" Column_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (siebte_spalte 0
  (siebte_spalte-1 nil 3756698247
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "column")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub3" "sub6" "sub9")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "siebte_spalte_inv(y!1)")
            (("2" (expand* "column" "siebte_spalte_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub3" "sub6" "sub9")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (column const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub6 const-decl "Zahl" Sudoku nil)
    (sub9 const-decl "Zahl" Sudoku nil)
    (sub3 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (siebte_spalte_inv const-decl "below(9)" Column_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (achte_spalte 0
  (achte_spalte-1 nil 3756698459
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "column")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub3" "sub6" "sub9")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "achte_spalte_inv(y!1)")
            (("2" (expand* "column" "achte_spalte_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub3" "sub6" "sub9")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (column const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub6 const-decl "Zahl" Sudoku nil)
    (sub9 const-decl "Zahl" Sudoku nil)
    (sub3 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (achte_spalte_inv const-decl "below(9)" Column_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (neunte_spalte 0
  (neunte_spalte-1 nil 3756698553
   ("" (expand "bijective?")
    (("" (split)
      (("1" (expand "injective?")
        (("1" (skolem-typepred)
          (("1" (flatten)
            (("1" (expand "column")
              (("1" (expand* "sudoku1" "div3" "mod3")
                (("1" (expand* "sub3" "sub6" "sub9")
                  (("1" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skolem-typepred)
          (("2" (inst 1 "neunte_spalte_inv(y!1)")
            (("2" (expand* "column" "neunte_spalte_inv")
              (("2"
                (expand* "sudoku1" "mod3" "div3" "sub3" "sub6" "sub9")
                (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (column const-decl "[below(9) -> Zahl]" Theorie nil)
    (sub6 const-decl "Zahl" Sudoku nil)
    (sub9 const-decl "Zahl" Sudoku nil)
    (sub3 const-decl "Zahl" Sudoku nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (mod3 const-decl "below(3)" Deklaration nil)
    (div3 const-decl "below(3)" Deklaration nil)
    (injective? const-decl "bool" functions nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Zahl nonempty-type-eq-decl nil Deklaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neunte_spalte_inv const-decl "below(9)" Column_inv nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (alle_zeilen 0
  (alle_zeilen-1 nil 3756822504
   ("" (skolem-typepred)
    (("" (case-replace "ysub!1 = 0")
      (("1" (case-replace "y!1 = 0")
        (("1" (rewrite "erste_zeile") nil nil)
         ("2" (case-replace "y!1 = 1")
          (("1" (rewrite "zweite_zeile") nil nil)
           ("2" (case-replace "y!1 = 2")
            (("1" (rewrite "dritte_zeile") nil nil)
             ("2" (smash) nil nil))
            nil))
          nil))
        nil)
       ("2" (case-replace "ysub!1 = 1")
        (("1" (case-replace "y!1 = 0")
          (("1" (rewrite "vierte_zeile") nil nil)
           ("2" (case-replace "y!1 = 1")
            (("1" (rewrite "fuenfte_zeile") nil nil)
             ("2" (case-replace "y!1 = 2")
              (("1" (rewrite "sechste_zeile") nil nil)
               ("2" (smash) nil nil))
              nil))
            nil))
          nil)
         ("2" (case-replace "ysub!1 = 2")
          (("1" (case-replace "y!1 = 0")
            (("1" (rewrite "siebte_zeile") nil nil)
             ("2" (case-replace "y!1 = 1")
              (("1" (rewrite "achte_zeile") nil nil)
               ("2" (case-replace "y!1 = 2")
                (("1" (rewrite "neunte_zeile") nil nil)
                 ("2" (smash) nil nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (zweite_zeile formula-decl nil Theorie nil)
    (dritte_zeile formula-decl nil Theorie nil)
    (erste_zeile formula-decl nil Theorie nil)
    (achte_zeile formula-decl nil Theorie nil)
    (neunte_zeile formula-decl nil Theorie nil)
    (siebte_zeile formula-decl nil Theorie nil)
    (vierte_zeile formula-decl nil Theorie nil)
    (sechste_zeile formula-decl nil Theorie nil)
    (fuenfte_zeile formula-decl nil Theorie nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (alle_spalten 0
  (alle_spalten-1 nil 3756827869
   ("" (skolem-typepred)
    (("" (case-replace "xsub!1 = 0")
      (("1" (case-replace "x!1 = 0")
        (("1" (rewrite "erste_spalte") nil nil)
         ("2" (case-replace "x!1 = 1")
          (("1" (rewrite "zweite_spalte") nil nil)
           ("2" (case-replace "x!1 = 2")
            (("1" (rewrite "dritte_spalte") nil nil)
             ("2" (smash) nil nil))
            nil))
          nil))
        nil)
       ("2" (case-replace "xsub!1 = 1")
        (("1" (case-replace "x!1 = 0")
          (("1" (rewrite "vierte_spalte") nil nil)
           ("2" (case-replace "x!1 = 1")
            (("1" (rewrite "fuenfte_spalte") nil nil)
             ("2" (case-replace "x!1 = 2")
              (("1" (rewrite "sechste_spalte") nil nil)
               ("2" (smash) nil nil))
              nil))
            nil))
          nil)
         ("2" (case-replace "xsub!1 = 2")
          (("1" (case-replace "x!1 = 0")
            (("1" (rewrite "siebte_spalte") nil nil)
             ("2" (case-replace "x!1 = 1")
              (("1" (rewrite "achte_spalte") nil nil)
               ("2" (case-replace "x!1 = 2")
                (("1" (rewrite "neunte_spalte") nil nil)
                 ("2" (smash) nil nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (zweite_spalte formula-decl nil Theorie nil)
    (dritte_spalte formula-decl nil Theorie nil)
    (erste_spalte formula-decl nil Theorie nil)
    (achte_spalte formula-decl nil Theorie nil)
    (neunte_spalte formula-decl nil Theorie nil)
    (siebte_spalte formula-decl nil Theorie nil)
    (vierte_spalte formula-decl nil Theorie nil)
    (sechste_spalte formula-decl nil Theorie nil)
    (fuenfte_spalte formula-decl nil Theorie nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (alle_subs 0
  (alle_subs-1 nil 3756991436
   ("" (skolem-typepred)
    (("" (case-replace "y!1 = 0")
      (("1" (case-replace "x!1 = 0")
        (("1" (expand "sudoku1") (("1" (rewrite "erste_sub") nil nil))
          nil)
         ("2" (case-replace "x!1 = 1")
          (("1" (expand "sudoku1")
            (("1" (rewrite "zweite_sub") nil nil)) nil)
           ("2" (case-replace "x!1 = 2")
            (("1" (expand "sudoku1")
              (("1" (rewrite "dritte_sub") nil nil)) nil)
             ("2" (smash) nil nil))
            nil))
          nil))
        nil)
       ("2" (case-replace "y!1 = 1")
        (("1" (case-replace "x!1 = 0")
          (("1" (expand "sudoku1")
            (("1" (rewrite "vierte_sub") nil nil)) nil)
           ("2" (case-replace "x!1 = 1")
            (("1" (expand "sudoku1")
              (("1" (rewrite "fuenfte_sub") nil nil)) nil)
             ("2" (case-replace "x!1 = 2")
              (("1" (expand "sudoku1")
                (("1" (rewrite "sechste_sub") nil nil)) nil)
               ("2" (smash) nil nil))
              nil))
            nil))
          nil)
         ("2" (case-replace "y!1 = 2")
          (("1" (case-replace "x!1 = 0")
            (("1" (expand "sudoku1")
              (("1" (rewrite "siebte_sub") nil nil)) nil)
             ("2" (case-replace "x!1 = 1")
              (("1" (expand "sudoku1")
                (("1" (rewrite "achte_sub") nil nil)) nil)
               ("2" (case-replace "x!1 = 2")
                (("1" (expand "sudoku1")
                  (("1" (rewrite "neunte_sub") nil nil)) nil)
                 ("2" (smash) nil nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (zweite_sub formula-decl nil Theorie nil)
    (dritte_sub formula-decl nil Theorie nil)
    (sudoku1 const-decl "SubMatrix" Sudoku nil)
    (erste_sub formula-decl nil Theorie nil)
    (achte_sub formula-decl nil Theorie nil)
    (neunte_sub formula-decl nil Theorie nil)
    (siebte_sub formula-decl nil Theorie nil)
    (vierte_sub formula-decl nil Theorie nil)
    (sechste_sub formula-decl nil Theorie nil)
    (fuenfte_sub formula-decl nil Theorie nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (sudoku_korrekt 0
  (sudoku_korrekt-1 nil 3756992331
   ("" (skolem-typepred)
    (("" (split)
      (("1" (rewrite "alle_zeilen") nil nil)
       ("2" (rewrite "alle_spalten") nil nil)
       ("3" (rewrite "alle_subs") nil nil))
      nil))
    nil)
   ((alle_zeilen formula-decl nil Theorie nil)
    (alle_spalten formula-decl nil Theorie nil)
    (alle_subs formula-decl nil Theorie nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (sieben_in_00 0
  (sieben_in_00-1 nil 3757261753
   ("" (assert) (("" (expand "sub1") (("" (propax) nil nil)) nil)) nil)
   ((sub1 const-decl "Zahl" Sudoku nil)) shostak))
 (nicht_eins_in_00 0
  (nicht_eins_in_00-1 nil 3757261676
   ("" (expand "sub1") (("" (assert) nil nil)) nil)
   ((sub1 const-decl "Zahl" Sudoku nil)) shostak)))

